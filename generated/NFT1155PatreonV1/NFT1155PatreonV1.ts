// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyKey extends ethereum.Event {
  get params(): BuyKey__Params {
    return new BuyKey__Params(this);
  }
}

export class BuyKey__Params {
  _event: BuyKey;

  constructor(event: BuyKey) {
    this._event = event;
  }

  get buy(): BuyKeyBuyStruct {
    return changetype<BuyKeyBuyStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class BuyKeyBuyStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[4].toBigInt();
  }

  get nftFee(): BigInt {
    return this[5].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[6].toBigInt();
  }

  get supplyPerUser(): BigInt {
    return this[7].toBigInt();
  }
}

export class Dividend extends ethereum.Event {
  get params(): Dividend__Params {
    return new Dividend__Params(this);
  }
}

export class Dividend__Params {
  _event: Dividend;

  constructor(event: Dividend) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DividendClaimed extends ethereum.Event {
  get params(): DividendClaimed__Params {
    return new DividendClaimed__Params(this);
  }
}

export class DividendClaimed__Params {
  _event: DividendClaimed;

  constructor(event: DividendClaimed) {
    this._event = event;
  }

  get claimant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoyaltyClaimed extends ethereum.Event {
  get params(): RoyaltyClaimed__Params {
    return new RoyaltyClaimed__Params(this);
  }
}

export class RoyaltyClaimed__Params {
  _event: RoyaltyClaimed;

  constructor(event: RoyaltyClaimed) {
    this._event = event;
  }

  get claimant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SellKey extends ethereum.Event {
  get params(): SellKey__Params {
    return new SellKey__Params(this);
  }
}

export class SellKey__Params {
  _event: SellKey;

  constructor(event: SellKey) {
    this._event = event;
  }

  get sell(): SellKeySellStruct {
    return changetype<SellKeySellStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class SellKeySellStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get protocolFee(): BigInt {
    return this[4].toBigInt();
  }

  get nftFee(): BigInt {
    return this[5].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[6].toBigInt();
  }

  get supplyPerUser(): BigInt {
    return this[7].toBigInt();
  }
}

export class NFT1155PatreonV1__holdersResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getKeys(): BigInt {
    return this.value0;
  }

  getDividendPointLastUpdated(): BigInt {
    return this.value1;
  }
}

export class NFT1155PatreonV1 extends ethereum.SmartContract {
  static bind(address: Address): NFT1155PatreonV1 {
    return new NFT1155PatreonV1("NFT1155PatreonV1", address);
  }

  dividendPerToken(param0: BigInt): BigInt {
    let result = super.call(
      "dividendPerToken",
      "dividendPerToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_dividendPerToken(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendPerToken",
      "dividendPerToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dividendPercentage(): BigInt {
    let result = super.call(
      "dividendPercentage",
      "dividendPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_dividendPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dividendPercentage",
      "dividendPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPrice(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPrice(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPrice",
      "getBuyPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBuyPriceAfterFee(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBuyPriceAfterFee(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBuyPriceAfterFee",
      "getBuyPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrice(supply: BigInt, amount: BigInt): BigInt {
    let result = super.call("getPrice", "getPrice(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(supply),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(supply: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(supply),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPrice(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPrice",
      "getSellPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPrice(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPrice",
      "getSellPrice(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellPriceAfterFee(tokenId: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getSellPriceAfterFee(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellPriceAfterFee",
      "getSellPriceAfterFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBalanceKeys(tokenId: BigInt): BigInt {
    let result = super.call(
      "getUserBalanceKeys",
      "getUserBalanceKeys(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getUserBalanceKeys(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalanceKeys",
      "getUserBalanceKeys(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  holders(param0: BigInt, param1: Address): NFT1155PatreonV1__holdersResult {
    let result = super.call(
      "holders",
      "holders(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new NFT1155PatreonV1__holdersResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_holders(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<NFT1155PatreonV1__holdersResult> {
    let result = super.tryCall(
      "holders",
      "holders(uint256,address):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFT1155PatreonV1__holdersResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  keySupply(param0: BigInt): BigInt {
    let result = super.call("keySupply", "keySupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_keySupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("keySupply", "keySupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myDividend(tokenId: BigInt): BigInt {
    let result = super.call("myDividend", "myDividend(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_myDividend(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("myDividend", "myDividend(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nftOwnerClaimedAmount(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "nftOwnerClaimedAmount",
      "nftOwnerClaimedAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_nftOwnerClaimedAmount(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftOwnerClaimedAmount",
      "nftOwnerClaimedAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftRoyaltyPercentage(): BigInt {
    let result = super.call(
      "nftRoyaltyPercentage",
      "nftRoyaltyPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nftRoyaltyPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftRoyaltyPercentage",
      "nftRoyaltyPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftRoyaltyPool(param0: BigInt): BigInt {
    let result = super.call(
      "nftRoyaltyPool",
      "nftRoyaltyPool(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_nftRoyaltyPool(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftRoyaltyPool",
      "nftRoyaltyPool(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFeePercentage(): BigInt {
    let result = super.call(
      "protocolFeePercentage",
      "protocolFeePercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeePercentage",
      "protocolFeePercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  protocolWallet(): Address {
    let result = super.call("protocolWallet", "protocolWallet():(address)", []);

    return result[0].toAddress();
  }

  try_protocolWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolWallet",
      "protocolWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _protocolWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocolFeePercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _nftRoyaltyPercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _dividendPercentage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyKeyCall extends ethereum.Call {
  get inputs(): BuyKeyCall__Inputs {
    return new BuyKeyCall__Inputs(this);
  }

  get outputs(): BuyKeyCall__Outputs {
    return new BuyKeyCall__Outputs(this);
  }
}

export class BuyKeyCall__Inputs {
  _call: BuyKeyCall;

  constructor(call: BuyKeyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyKeyCall__Outputs {
  _call: BuyKeyCall;

  constructor(call: BuyKeyCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimRoyaltyCall extends ethereum.Call {
  get inputs(): ClaimRoyaltyCall__Inputs {
    return new ClaimRoyaltyCall__Inputs(this);
  }

  get outputs(): ClaimRoyaltyCall__Outputs {
    return new ClaimRoyaltyCall__Outputs(this);
  }
}

export class ClaimRoyaltyCall__Inputs {
  _call: ClaimRoyaltyCall;

  constructor(call: ClaimRoyaltyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimRoyaltyCall__Outputs {
  _call: ClaimRoyaltyCall;

  constructor(call: ClaimRoyaltyCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SellKeyCall extends ethereum.Call {
  get inputs(): SellKeyCall__Inputs {
    return new SellKeyCall__Inputs(this);
  }

  get outputs(): SellKeyCall__Outputs {
    return new SellKeyCall__Outputs(this);
  }
}

export class SellKeyCall__Inputs {
  _call: SellKeyCall;

  constructor(call: SellKeyCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SellKeyCall__Outputs {
  _call: SellKeyCall;

  constructor(call: SellKeyCall) {
    this._call = call;
  }
}

export class SetDividendPercentageCall extends ethereum.Call {
  get inputs(): SetDividendPercentageCall__Inputs {
    return new SetDividendPercentageCall__Inputs(this);
  }

  get outputs(): SetDividendPercentageCall__Outputs {
    return new SetDividendPercentageCall__Outputs(this);
  }
}

export class SetDividendPercentageCall__Inputs {
  _call: SetDividendPercentageCall;

  constructor(call: SetDividendPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDividendPercentageCall__Outputs {
  _call: SetDividendPercentageCall;

  constructor(call: SetDividendPercentageCall) {
    this._call = call;
  }
}

export class SetNftContractAddressCall extends ethereum.Call {
  get inputs(): SetNftContractAddressCall__Inputs {
    return new SetNftContractAddressCall__Inputs(this);
  }

  get outputs(): SetNftContractAddressCall__Outputs {
    return new SetNftContractAddressCall__Outputs(this);
  }
}

export class SetNftContractAddressCall__Inputs {
  _call: SetNftContractAddressCall;

  constructor(call: SetNftContractAddressCall) {
    this._call = call;
  }

  get _nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftContractAddressCall__Outputs {
  _call: SetNftContractAddressCall;

  constructor(call: SetNftContractAddressCall) {
    this._call = call;
  }
}

export class SetNftRoyaltyPercentageCall extends ethereum.Call {
  get inputs(): SetNftRoyaltyPercentageCall__Inputs {
    return new SetNftRoyaltyPercentageCall__Inputs(this);
  }

  get outputs(): SetNftRoyaltyPercentageCall__Outputs {
    return new SetNftRoyaltyPercentageCall__Outputs(this);
  }
}

export class SetNftRoyaltyPercentageCall__Inputs {
  _call: SetNftRoyaltyPercentageCall;

  constructor(call: SetNftRoyaltyPercentageCall) {
    this._call = call;
  }

  get _nftFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNftRoyaltyPercentageCall__Outputs {
  _call: SetNftRoyaltyPercentageCall;

  constructor(call: SetNftRoyaltyPercentageCall) {
    this._call = call;
  }
}

export class SetProtocolFeePercentageCall extends ethereum.Call {
  get inputs(): SetProtocolFeePercentageCall__Inputs {
    return new SetProtocolFeePercentageCall__Inputs(this);
  }

  get outputs(): SetProtocolFeePercentageCall__Outputs {
    return new SetProtocolFeePercentageCall__Outputs(this);
  }
}

export class SetProtocolFeePercentageCall__Inputs {
  _call: SetProtocolFeePercentageCall;

  constructor(call: SetProtocolFeePercentageCall) {
    this._call = call;
  }

  get _protocolFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeePercentageCall__Outputs {
  _call: SetProtocolFeePercentageCall;

  constructor(call: SetProtocolFeePercentageCall) {
    this._call = call;
  }
}

export class SetProtocolWalletCall extends ethereum.Call {
  get inputs(): SetProtocolWalletCall__Inputs {
    return new SetProtocolWalletCall__Inputs(this);
  }

  get outputs(): SetProtocolWalletCall__Outputs {
    return new SetProtocolWalletCall__Outputs(this);
  }
}

export class SetProtocolWalletCall__Inputs {
  _call: SetProtocolWalletCall;

  constructor(call: SetProtocolWalletCall) {
    this._call = call;
  }

  get _newProtocolWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetProtocolWalletCall__Outputs {
  _call: SetProtocolWalletCall;

  constructor(call: SetProtocolWalletCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
